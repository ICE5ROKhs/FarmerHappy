{"ast":null,"code":"import axios from 'axios';\nimport logger from '../utils/logger';\nconst API_URL = '/api/v1/auth';\nexport const authService = {\n  async register(userData) {\n    try {\n      logger.apiRequest('POST', `${API_URL}/register`, {\n        phone: userData.phone,\n        user_type: userData.user_type,\n        nickname: userData.nickname\n      });\n      logger.info('AUTH', '开始注册用户', {\n        userType: userData.user_type\n      });\n      const response = await axios.post(`${API_URL}/register`, userData);\n      logger.apiResponse('POST', `${API_URL}/register`, response.status, {\n        success: true\n      });\n      logger.info('AUTH', '用户注册成功', {\n        phone: userData.phone,\n        userType: userData.user_type\n      });\n      return response.data;\n    } catch (error) {\n      logger.apiError('POST', `${API_URL}/register`, error);\n      logger.error('AUTH', '用户注册失败', {\n        phone: userData.phone,\n        errorMessage: error.response?.data?.message || error.message\n      }, error);\n      throw error.response?.data || error.message;\n    }\n  },\n  async login(credentials) {\n    try {\n      logger.apiRequest('POST', `${API_URL}/login`, {\n        phone: credentials.phone\n      });\n      logger.info('AUTH', '开始用户登录', {\n        phone: credentials.phone\n      });\n      const response = await axios.post(`${API_URL}/login`, credentials);\n      logger.apiResponse('POST', `${API_URL}/login`, response.status, {\n        hasToken: !!response.data.token\n      });\n      if (response.data.token) {\n        // 从响应中提取用户信息，排除密码\n        const {\n          password,\n          ...userInfo\n        } = response.data;\n        // 保存用户信息到本地存储\n        localStorage.setItem('user', JSON.stringify(userInfo));\n        logger.info('AUTH', '用户登录成功，已保存用户信息', {\n          phone: credentials.phone,\n          userType: userInfo.user_type\n        });\n      }\n      return response.data;\n    } catch (error) {\n      logger.apiError('POST', `${API_URL}/login`, error);\n      logger.error('AUTH', '用户登录失败', {\n        phone: credentials.phone,\n        errorMessage: error.response?.data?.message || error.message\n      }, error);\n      throw error.response?.data || error.message;\n    }\n  },\n  logout() {\n    logger.info('AUTH', '用户登出');\n    const user = localStorage.getItem('user');\n    if (user) {\n      try {\n        const userData = JSON.parse(user);\n        logger.info('AUTH', '清除用户信息', {\n          phone: userData.phone\n        });\n      } catch (e) {\n        logger.warn('AUTH', '解析用户信息失败');\n      }\n    }\n    localStorage.removeItem('user');\n    logger.info('AUTH', '用户登出成功');\n  }\n};","map":{"version":3,"names":["axios","logger","API_URL","authService","register","userData","apiRequest","phone","user_type","nickname","info","userType","response","post","apiResponse","status","success","data","error","apiError","errorMessage","message","login","credentials","hasToken","token","password","userInfo","localStorage","setItem","JSON","stringify","logout","user","getItem","parse","e","warn","removeItem"],"sources":["D:/STUDY/FarmerHappy/farmer_happy/src/api/auth.js"],"sourcesContent":["import axios from 'axios';\r\nimport logger from '../utils/logger';\r\n\r\nconst API_URL = '/api/v1/auth';\r\n\r\nexport const authService = {\r\n    async register(userData) {\r\n        try {\r\n            logger.apiRequest('POST', `${API_URL}/register`, {\r\n                phone: userData.phone,\r\n                user_type: userData.user_type,\r\n                nickname: userData.nickname\r\n            });\r\n            logger.info('AUTH', '开始注册用户', { userType: userData.user_type });\r\n            \r\n            const response = await axios.post(`${API_URL}/register`, userData);\r\n            \r\n            logger.apiResponse('POST', `${API_URL}/register`, response.status, {\r\n                success: true\r\n            });\r\n            logger.info('AUTH', '用户注册成功', { \r\n                phone: userData.phone,\r\n                userType: userData.user_type \r\n            });\r\n            \r\n            return response.data;\r\n        } catch (error) {\r\n            logger.apiError('POST', `${API_URL}/register`, error);\r\n            logger.error('AUTH', '用户注册失败', {\r\n                phone: userData.phone,\r\n                errorMessage: error.response?.data?.message || error.message\r\n            }, error);\r\n            throw error.response?.data || error.message;\r\n        }\r\n    },\r\n\r\n    async login(credentials) {\r\n        try {\r\n            logger.apiRequest('POST', `${API_URL}/login`, {\r\n                phone: credentials.phone\r\n            });\r\n            logger.info('AUTH', '开始用户登录', { phone: credentials.phone });\r\n            \r\n            const response = await axios.post(`${API_URL}/login`, credentials);\r\n            \r\n            logger.apiResponse('POST', `${API_URL}/login`, response.status, {\r\n                hasToken: !!response.data.token\r\n            });\r\n            \r\n            if (response.data.token) {\r\n                // 从响应中提取用户信息，排除密码\r\n                const { password, ...userInfo } = response.data;\r\n                // 保存用户信息到本地存储\r\n                localStorage.setItem('user', JSON.stringify(userInfo));\r\n                logger.info('AUTH', '用户登录成功，已保存用户信息', {\r\n                    phone: credentials.phone,\r\n                    userType: userInfo.user_type\r\n                });\r\n            }\r\n            \r\n            return response.data;\r\n        } catch (error) {\r\n            logger.apiError('POST', `${API_URL}/login`, error);\r\n            logger.error('AUTH', '用户登录失败', {\r\n                phone: credentials.phone,\r\n                errorMessage: error.response?.data?.message || error.message\r\n            }, error);\r\n            throw error.response?.data || error.message;\r\n        }\r\n    },\r\n\r\n    logout() {\r\n        logger.info('AUTH', '用户登出');\r\n        const user = localStorage.getItem('user');\r\n        if (user) {\r\n            try {\r\n                const userData = JSON.parse(user);\r\n                logger.info('AUTH', '清除用户信息', { phone: userData.phone });\r\n            } catch (e) {\r\n                logger.warn('AUTH', '解析用户信息失败');\r\n            }\r\n        }\r\n        localStorage.removeItem('user');\r\n        logger.info('AUTH', '用户登出成功');\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}