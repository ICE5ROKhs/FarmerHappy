{"ast":null,"code":"/**\r\n * 统一的前端日志工具\r\n * 支持不同级别的日志输出和格式化\r\n */\n\nconst LOG_LEVELS = {\n  DEBUG: 0,\n  INFO: 1,\n  WARN: 2,\n  ERROR: 3,\n  OFF: 4\n};\nclass Logger {\n  constructor() {\n    // 根据环境设置日志级别\n    this.level = process.env.NODE_ENV === 'production' ? LOG_LEVELS.WARN : LOG_LEVELS.DEBUG;\n    this.enableTimestamp = true;\n    this.enableStackTrace = true;\n  }\n\n  /**\r\n   * 格式化时间戳\r\n   */\n  getTimestamp() {\n    const now = new Date();\n    return now.toISOString();\n  }\n\n  /**\r\n   * 格式化日志消息\r\n   */\n  formatMessage(level, category, message, data) {\n    const parts = [];\n    if (this.enableTimestamp) {\n      parts.push(`[${this.getTimestamp()}]`);\n    }\n    parts.push(`[${level}]`);\n    if (category) {\n      parts.push(`[${category}]`);\n    }\n    parts.push(message);\n    return parts.join(' ');\n  }\n\n  /**\r\n   * 通用日志输出方法\r\n   */\n  log(level, category, message, data, error) {\n    if (this.level > LOG_LEVELS[level.toUpperCase()]) {\n      return;\n    }\n    const formattedMessage = this.formatMessage(level, category, message, data);\n    switch (level.toUpperCase()) {\n      case 'DEBUG':\n        console.debug(formattedMessage, data || '');\n        break;\n      case 'INFO':\n        console.info(formattedMessage, data || '');\n        break;\n      case 'WARN':\n        console.warn(formattedMessage, data || '');\n        break;\n      case 'ERROR':\n        console.error(formattedMessage, data || '');\n        if (error && this.enableStackTrace) {\n          console.error('Stack trace:', error);\n        }\n        break;\n      default:\n        console.log(formattedMessage, data || '');\n    }\n  }\n\n  /**\r\n   * DEBUG级别日志\r\n   */\n  debug(category, message, data) {\n    this.log('DEBUG', category, message, data);\n  }\n\n  /**\r\n   * INFO级别日志\r\n   */\n  info(category, message, data) {\n    this.log('INFO', category, message, data);\n  }\n\n  /**\r\n   * WARN级别日志\r\n   */\n  warn(category, message, data) {\n    this.log('WARN', category, message, data);\n  }\n\n  /**\r\n   * ERROR级别日志\r\n   */\n  error(category, message, data, error) {\n    this.log('ERROR', category, message, data, error);\n  }\n\n  /**\r\n   * API请求日志\r\n   */\n  apiRequest(method, url, data) {\n    this.info('API', `${method} ${url}`, data);\n  }\n\n  /**\r\n   * API响应日志\r\n   */\n  apiResponse(method, url, status, data) {\n    this.info('API', `${method} ${url} - ${status}`, data);\n  }\n\n  /**\r\n   * API错误日志\r\n   */\n  apiError(method, url, error) {\n    this.error('API', `${method} ${url} - Failed`, {\n      message: error.message || error,\n      status: error.status,\n      data: error.data\n    }, error);\n  }\n\n  /**\r\n   * 用户行为日志\r\n   */\n  userAction(action, details) {\n    this.info('USER_ACTION', action, details);\n  }\n\n  /**\r\n   * 组件生命周期日志\r\n   */\n  lifecycle(component, phase, data) {\n    this.debug('LIFECYCLE', `${component} - ${phase}`, data);\n  }\n\n  /**\r\n   * 表单验证日志\r\n   */\n  validation(formName, isValid, errors) {\n    if (isValid) {\n      this.debug('VALIDATION', `${formName} - Valid`);\n    } else {\n      this.warn('VALIDATION', `${formName} - Invalid`, errors);\n    }\n  }\n\n  /**\r\n   * 路由导航日志\r\n   */\n  navigation(from, to) {\n    this.info('NAVIGATION', `${from} -> ${to}`);\n  }\n\n  /**\r\n   * 设置日志级别\r\n   */\n  setLevel(level) {\n    if (LOG_LEVELS[level.toUpperCase()] !== undefined) {\n      this.level = LOG_LEVELS[level.toUpperCase()];\n      this.info('LOGGER', `Log level set to ${level}`);\n    }\n  }\n\n  /**\r\n   * 启用/禁用时间戳\r\n   */\n  setTimestamp(enabled) {\n    this.enableTimestamp = enabled;\n  }\n\n  /**\r\n   * 启用/禁用堆栈跟踪\r\n   */\n  setStackTrace(enabled) {\n    this.enableStackTrace = enabled;\n  }\n}\n\n// 导出单例\nconst logger = new Logger();\n\n// 在开发环境下，将logger挂载到window对象，方便调试\nif (process.env.NODE_ENV !== 'production') {\n  window.$logger = logger;\n}\nexport default logger;","map":{"version":3,"names":["LOG_LEVELS","DEBUG","INFO","WARN","ERROR","OFF","Logger","constructor","level","process","env","NODE_ENV","enableTimestamp","enableStackTrace","getTimestamp","now","Date","toISOString","formatMessage","category","message","data","parts","push","join","log","error","toUpperCase","formattedMessage","console","debug","info","warn","apiRequest","method","url","apiResponse","status","apiError","userAction","action","details","lifecycle","component","phase","validation","formName","isValid","errors","navigation","from","to","setLevel","undefined","setTimestamp","enabled","setStackTrace","logger","window","$logger"],"sources":["D:/STUDY/FarmerHappy/farmer_happy/src/utils/logger.js"],"sourcesContent":["/**\r\n * 统一的前端日志工具\r\n * 支持不同级别的日志输出和格式化\r\n */\r\n\r\nconst LOG_LEVELS = {\r\n  DEBUG: 0,\r\n  INFO: 1,\r\n  WARN: 2,\r\n  ERROR: 3,\r\n  OFF: 4\r\n};\r\n\r\nclass Logger {\r\n  constructor() {\r\n    // 根据环境设置日志级别\r\n    this.level = process.env.NODE_ENV === 'production' ? LOG_LEVELS.WARN : LOG_LEVELS.DEBUG;\r\n    this.enableTimestamp = true;\r\n    this.enableStackTrace = true;\r\n  }\r\n\r\n  /**\r\n   * 格式化时间戳\r\n   */\r\n  getTimestamp() {\r\n    const now = new Date();\r\n    return now.toISOString();\r\n  }\r\n\r\n  /**\r\n   * 格式化日志消息\r\n   */\r\n  formatMessage(level, category, message, data) {\r\n    const parts = [];\r\n    \r\n    if (this.enableTimestamp) {\r\n      parts.push(`[${this.getTimestamp()}]`);\r\n    }\r\n    \r\n    parts.push(`[${level}]`);\r\n    \r\n    if (category) {\r\n      parts.push(`[${category}]`);\r\n    }\r\n    \r\n    parts.push(message);\r\n    \r\n    return parts.join(' ');\r\n  }\r\n\r\n  /**\r\n   * 通用日志输出方法\r\n   */\r\n  log(level, category, message, data, error) {\r\n    if (this.level > LOG_LEVELS[level.toUpperCase()]) {\r\n      return;\r\n    }\r\n\r\n    const formattedMessage = this.formatMessage(level, category, message, data);\r\n    \r\n    switch (level.toUpperCase()) {\r\n      case 'DEBUG':\r\n        console.debug(formattedMessage, data || '');\r\n        break;\r\n      case 'INFO':\r\n        console.info(formattedMessage, data || '');\r\n        break;\r\n      case 'WARN':\r\n        console.warn(formattedMessage, data || '');\r\n        break;\r\n      case 'ERROR':\r\n        console.error(formattedMessage, data || '');\r\n        if (error && this.enableStackTrace) {\r\n          console.error('Stack trace:', error);\r\n        }\r\n        break;\r\n      default:\r\n        console.log(formattedMessage, data || '');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * DEBUG级别日志\r\n   */\r\n  debug(category, message, data) {\r\n    this.log('DEBUG', category, message, data);\r\n  }\r\n\r\n  /**\r\n   * INFO级别日志\r\n   */\r\n  info(category, message, data) {\r\n    this.log('INFO', category, message, data);\r\n  }\r\n\r\n  /**\r\n   * WARN级别日志\r\n   */\r\n  warn(category, message, data) {\r\n    this.log('WARN', category, message, data);\r\n  }\r\n\r\n  /**\r\n   * ERROR级别日志\r\n   */\r\n  error(category, message, data, error) {\r\n    this.log('ERROR', category, message, data, error);\r\n  }\r\n\r\n  /**\r\n   * API请求日志\r\n   */\r\n  apiRequest(method, url, data) {\r\n    this.info('API', `${method} ${url}`, data);\r\n  }\r\n\r\n  /**\r\n   * API响应日志\r\n   */\r\n  apiResponse(method, url, status, data) {\r\n    this.info('API', `${method} ${url} - ${status}`, data);\r\n  }\r\n\r\n  /**\r\n   * API错误日志\r\n   */\r\n  apiError(method, url, error) {\r\n    this.error('API', `${method} ${url} - Failed`, {\r\n      message: error.message || error,\r\n      status: error.status,\r\n      data: error.data\r\n    }, error);\r\n  }\r\n\r\n  /**\r\n   * 用户行为日志\r\n   */\r\n  userAction(action, details) {\r\n    this.info('USER_ACTION', action, details);\r\n  }\r\n\r\n  /**\r\n   * 组件生命周期日志\r\n   */\r\n  lifecycle(component, phase, data) {\r\n    this.debug('LIFECYCLE', `${component} - ${phase}`, data);\r\n  }\r\n\r\n  /**\r\n   * 表单验证日志\r\n   */\r\n  validation(formName, isValid, errors) {\r\n    if (isValid) {\r\n      this.debug('VALIDATION', `${formName} - Valid`);\r\n    } else {\r\n      this.warn('VALIDATION', `${formName} - Invalid`, errors);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 路由导航日志\r\n   */\r\n  navigation(from, to) {\r\n    this.info('NAVIGATION', `${from} -> ${to}`);\r\n  }\r\n\r\n  /**\r\n   * 设置日志级别\r\n   */\r\n  setLevel(level) {\r\n    if (LOG_LEVELS[level.toUpperCase()] !== undefined) {\r\n      this.level = LOG_LEVELS[level.toUpperCase()];\r\n      this.info('LOGGER', `Log level set to ${level}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 启用/禁用时间戳\r\n   */\r\n  setTimestamp(enabled) {\r\n    this.enableTimestamp = enabled;\r\n  }\r\n\r\n  /**\r\n   * 启用/禁用堆栈跟踪\r\n   */\r\n  setStackTrace(enabled) {\r\n    this.enableStackTrace = enabled;\r\n  }\r\n}\r\n\r\n// 导出单例\r\nconst logger = new Logger();\r\n\r\n// 在开发环境下，将logger挂载到window对象，方便调试\r\nif (process.env.NODE_ENV !== 'production') {\r\n  window.$logger = logger;\r\n}\r\n\r\nexport default logger;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}