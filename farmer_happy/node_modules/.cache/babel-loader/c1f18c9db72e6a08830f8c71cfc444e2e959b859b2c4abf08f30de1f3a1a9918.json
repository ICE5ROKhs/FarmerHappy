{"ast":null,"code":"import { ref, reactive } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { authService } from '../api/auth';\nexport default {\n  name: 'Register',\n  setup() {\n    const router = useRouter();\n    const loading = ref(false);\n    const form = reactive({\n      phone: '',\n      password: '',\n      nickname: '',\n      user_type: ''\n    });\n    const errors = reactive({\n      phone: '',\n      password: '',\n      nickname: '',\n      user_type: ''\n    });\n    const validateForm = () => {\n      let isValid = true;\n      // Reset errors\n      Object.keys(errors).forEach(key => errors[key] = '');\n\n      // Phone validation\n      if (!form.phone) {\n        errors.phone = '请输入手机号';\n        isValid = false;\n      } else if (!/^1[3-9]\\d{9}$/.test(form.phone)) {\n        errors.phone = '请输入有效的手机号';\n        isValid = false;\n      }\n\n      // Password validation\n      if (!form.password) {\n        errors.password = '请输入密码';\n        isValid = false;\n      } else if (!/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,32}$/.test(form.password)) {\n        errors.password = '密码必须包含大小写字母和数字，长度8-32位';\n        isValid = false;\n      }\n\n      // Nickname validation\n      if (!form.nickname) {\n        errors.nickname = '请输入昵称';\n        isValid = false;\n      } else if (form.nickname.length < 1 || form.nickname.length > 30) {\n        errors.nickname = '昵称长度应在1-30个字符之间';\n        isValid = false;\n      }\n\n      // User type validation\n      if (!form.user_type) {\n        errors.user_type = '请选择用户类型';\n        isValid = false;\n      }\n      return isValid;\n    };\n    const handleSubmit = async () => {\n      if (!validateForm()) return;\n      loading.value = true;\n      try {\n        await authService.register(form);\n        router.push('/login');\n      } catch (error) {\n        if (error.message === 'Phone already exists') {\n          errors.phone = '该手机号已被注册';\n        } else {\n          errors.password = '注册失败，请稍后重试';\n        }\n      } finally {\n        loading.value = false;\n      }\n    };\n    return {\n      form,\n      errors,\n      loading,\n      handleSubmit\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","useRouter","authService","name","setup","router","loading","form","phone","password","nickname","user_type","errors","validateForm","isValid","Object","keys","forEach","key","test","length","handleSubmit","value","register","push","error","message"],"sources":["D:\\STUDY\\FarmerHappy\\farmer_happy\\src\\components\\Register.vue"],"sourcesContent":["<template>\r\n  <div class=\"auth-container\">\r\n    <div class=\"auth-card\">\r\n      <h1 class=\"auth-title\">注册农乐平台</h1>\r\n      <form @submit.prevent=\"handleSubmit\">\r\n        <div class=\"form-group\">\r\n          <label class=\"form-label\">手机号</label>\r\n          <input\r\n            v-model=\"form.phone\"\r\n            type=\"tel\"\r\n            class=\"form-input\"\r\n            :class=\"{ 'error': errors.phone }\"\r\n            placeholder=\"请输入手机号\"\r\n          />\r\n          <span v-if=\"errors.phone\" class=\"form-error\">{{ errors.phone }}</span>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label class=\"form-label\">密码</label>\r\n          <input\r\n            v-model=\"form.password\"\r\n            type=\"password\"\r\n            class=\"form-input\"\r\n            :class=\"{ 'error': errors.password }\"\r\n            placeholder=\"请输入密码（8-32位，包含大小写字母和数字）\"\r\n          />\r\n          <span v-if=\"errors.password\" class=\"form-error\">{{ errors.password }}</span>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label class=\"form-label\">昵称</label>\r\n          <input\r\n            v-model=\"form.nickname\"\r\n            type=\"text\"\r\n            class=\"form-input\"\r\n            :class=\"{ 'error': errors.nickname }\"\r\n            placeholder=\"请输入昵称\"\r\n          />\r\n          <span v-if=\"errors.nickname\" class=\"form-error\">{{ errors.nickname }}</span>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label class=\"form-label\">用户类型</label>\r\n          <select\r\n            v-model=\"form.user_type\"\r\n            class=\"form-input\"\r\n            :class=\"{ 'error': errors.user_type }\"\r\n          >\r\n            <option value=\"\">请选择用户类型</option>\r\n            <option value=\"farmer\">农户</option>\r\n            <option value=\"buyer\">买家</option>\r\n            <option value=\"expert\">技术专家</option>\r\n            <option value=\"bank\">银行</option>\r\n            <option value=\"admin\">管理员</option>\r\n          </select>\r\n          <span v-if=\"errors.user_type\" class=\"form-error\">{{ errors.user_type }}</span>\r\n        </div>\r\n\r\n        <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"loading\">\r\n          {{ loading ? '注册中...' : '注册' }}\r\n        </button>\r\n\r\n        <div class=\"auth-switch\">\r\n          已有账号？\r\n          <router-link to=\"/login\">立即登录</router-link>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive } from 'vue';\r\nimport { useRouter } from 'vue-router';\r\nimport { authService } from '../api/auth';\r\n\r\nexport default {\r\n  name: 'Register',\r\n  setup() {\r\n    const router = useRouter();\r\n    const loading = ref(false);\r\n    const form = reactive({\r\n      phone: '',\r\n      password: '',\r\n      nickname: '',\r\n      user_type: ''\r\n    });\r\n    const errors = reactive({\r\n      phone: '',\r\n      password: '',\r\n      nickname: '',\r\n      user_type: ''\r\n    });\r\n\r\n    const validateForm = () => {\r\n      let isValid = true;\r\n      // Reset errors\r\n      Object.keys(errors).forEach(key => errors[key] = '');\r\n\r\n      // Phone validation\r\n      if (!form.phone) {\r\n        errors.phone = '请输入手机号';\r\n        isValid = false;\r\n      } else if (!/^1[3-9]\\d{9}$/.test(form.phone)) {\r\n        errors.phone = '请输入有效的手机号';\r\n        isValid = false;\r\n      }\r\n\r\n      // Password validation\r\n      if (!form.password) {\r\n        errors.password = '请输入密码';\r\n        isValid = false;\r\n      } else if (!/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,32}$/.test(form.password)) {\r\n        errors.password = '密码必须包含大小写字母和数字，长度8-32位';\r\n        isValid = false;\r\n      }\r\n\r\n      // Nickname validation\r\n      if (!form.nickname) {\r\n        errors.nickname = '请输入昵称';\r\n        isValid = false;\r\n      } else if (form.nickname.length < 1 || form.nickname.length > 30) {\r\n        errors.nickname = '昵称长度应在1-30个字符之间';\r\n        isValid = false;\r\n      }\r\n\r\n      // User type validation\r\n      if (!form.user_type) {\r\n        errors.user_type = '请选择用户类型';\r\n        isValid = false;\r\n      }\r\n\r\n      return isValid;\r\n    };\r\n\r\n    const handleSubmit = async () => {\r\n      if (!validateForm()) return;\r\n\r\n      loading.value = true;\r\n      try {\r\n        await authService.register(form);\r\n        router.push('/login');\r\n      } catch (error) {\r\n        if (error.message === 'Phone already exists') {\r\n          errors.phone = '该手机号已被注册';\r\n        } else {\r\n          errors.password = '注册失败，请稍后重试';\r\n        }\r\n      } finally {\r\n        loading.value = false;\r\n      }\r\n    };\r\n\r\n    return {\r\n      form,\r\n      errors,\r\n      loading,\r\n      handleSubmit\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n@import '../assets/styles/theme.css';\r\n\r\nselect.form-input {\r\n  appearance: none;\r\n  background-image: url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23A0AEC0' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M6 9l6 6 6-6'/%3E%3C/svg%3E\");\r\n  background-repeat: no-repeat;\r\n  background-position: right 0.75rem center;\r\n  background-size: 16px;\r\n  padding-right: 2.5rem;\r\n}\r\n</style>\r\n"],"mappings":"AAwEA,SAASA,GAAG,EAAEC,QAAO,QAAS,KAAK;AACnC,SAASC,SAAQ,QAAS,YAAY;AACtC,SAASC,WAAU,QAAS,aAAa;AAEzC,eAAe;EACbC,IAAI,EAAE,UAAU;EAChBC,KAAKA,CAAA,EAAG;IACN,MAAMC,MAAK,GAAIJ,SAAS,CAAC,CAAC;IAC1B,MAAMK,OAAM,GAAIP,GAAG,CAAC,KAAK,CAAC;IAC1B,MAAMQ,IAAG,GAAIP,QAAQ,CAAC;MACpBQ,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,SAAS,EAAE;IACb,CAAC,CAAC;IACF,MAAMC,MAAK,GAAIZ,QAAQ,CAAC;MACtBQ,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,SAAS,EAAE;IACb,CAAC,CAAC;IAEF,MAAME,YAAW,GAAIA,CAAA,KAAM;MACzB,IAAIC,OAAM,GAAI,IAAI;MAClB;MACAC,MAAM,CAACC,IAAI,CAACJ,MAAM,CAAC,CAACK,OAAO,CAACC,GAAE,IAAKN,MAAM,CAACM,GAAG,IAAI,EAAE,CAAC;;MAEpD;MACA,IAAI,CAACX,IAAI,CAACC,KAAK,EAAE;QACfI,MAAM,CAACJ,KAAI,GAAI,QAAQ;QACvBM,OAAM,GAAI,KAAK;MACjB,OAAO,IAAI,CAAC,eAAe,CAACK,IAAI,CAACZ,IAAI,CAACC,KAAK,CAAC,EAAE;QAC5CI,MAAM,CAACJ,KAAI,GAAI,WAAW;QAC1BM,OAAM,GAAI,KAAK;MACjB;;MAEA;MACA,IAAI,CAACP,IAAI,CAACE,QAAQ,EAAE;QAClBG,MAAM,CAACH,QAAO,GAAI,OAAO;QACzBK,OAAM,GAAI,KAAK;MACjB,OAAO,IAAI,CAAC,yCAAyC,CAACK,IAAI,CAACZ,IAAI,CAACE,QAAQ,CAAC,EAAE;QACzEG,MAAM,CAACH,QAAO,GAAI,wBAAwB;QAC1CK,OAAM,GAAI,KAAK;MACjB;;MAEA;MACA,IAAI,CAACP,IAAI,CAACG,QAAQ,EAAE;QAClBE,MAAM,CAACF,QAAO,GAAI,OAAO;QACzBI,OAAM,GAAI,KAAK;MACjB,OAAO,IAAIP,IAAI,CAACG,QAAQ,CAACU,MAAK,GAAI,KAAKb,IAAI,CAACG,QAAQ,CAACU,MAAK,GAAI,EAAE,EAAE;QAChER,MAAM,CAACF,QAAO,GAAI,iBAAiB;QACnCI,OAAM,GAAI,KAAK;MACjB;;MAEA;MACA,IAAI,CAACP,IAAI,CAACI,SAAS,EAAE;QACnBC,MAAM,CAACD,SAAQ,GAAI,SAAS;QAC5BG,OAAM,GAAI,KAAK;MACjB;MAEA,OAAOA,OAAO;IAChB,CAAC;IAED,MAAMO,YAAW,GAAI,MAAAA,CAAA,KAAY;MAC/B,IAAI,CAACR,YAAY,CAAC,CAAC,EAAE;MAErBP,OAAO,CAACgB,KAAI,GAAI,IAAI;MACpB,IAAI;QACF,MAAMpB,WAAW,CAACqB,QAAQ,CAAChB,IAAI,CAAC;QAChCF,MAAM,CAACmB,IAAI,CAAC,QAAQ,CAAC;MACvB,EAAE,OAAOC,KAAK,EAAE;QACd,IAAIA,KAAK,CAACC,OAAM,KAAM,sBAAsB,EAAE;UAC5Cd,MAAM,CAACJ,KAAI,GAAI,UAAU;QAC3B,OAAO;UACLI,MAAM,CAACH,QAAO,GAAI,YAAY;QAChC;MACF,UAAU;QACRH,OAAO,CAACgB,KAAI,GAAI,KAAK;MACvB;IACF,CAAC;IAED,OAAO;MACLf,IAAI;MACJK,MAAM;MACNN,OAAO;MACPe;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}