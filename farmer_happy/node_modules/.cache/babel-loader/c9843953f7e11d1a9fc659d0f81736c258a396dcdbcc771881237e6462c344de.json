{"ast":null,"code":"import axios from 'axios';\nimport logger from '../utils/logger';\nconst API_URL = '/api/v1/auth';\nexport const authService = {\n  async register(userData) {\n    try {\n      logger.apiRequest('POST', `${API_URL}/register`, {\n        phone: userData.phone,\n        user_type: userData.user_type,\n        nickname: userData.nickname\n      });\n      logger.info('AUTH', '开始注册用户', {\n        userType: userData.user_type\n      });\n      const response = await axios.post(`${API_URL}/register`, userData);\n      logger.apiResponse('POST', `${API_URL}/register`, response.status, {\n        code: response.data.code,\n        success: response.data.code === 200\n      });\n\n      // 检查响应体中的 code 字段\n      if (response.data.code !== 200) {\n        logger.error('AUTH', '注册失败', {\n          phone: userData.phone,\n          code: response.data.code,\n          message: response.data.message\n        });\n\n        // 根据不同的错误码抛出详细的错误信息\n        const errorObj = {\n          code: response.data.code,\n          message: response.data.message,\n          errors: response.data.errors || []\n        };\n        throw errorObj;\n      }\n      logger.info('AUTH', '用户注册成功', {\n        phone: userData.phone,\n        userType: userData.user_type\n      });\n      return response.data;\n    } catch (error) {\n      logger.apiError('POST', `${API_URL}/register`, error);\n      logger.error('AUTH', '用户注册失败', {\n        phone: userData.phone,\n        errorMessage: error.response?.data?.message || error.message\n      }, error);\n\n      // 如果是 axios 错误，提取详细的错误信息\n      if (error.response?.data) {\n        throw {\n          code: error.response.data.code,\n          message: error.response.data.message,\n          errors: error.response.data.errors || []\n        };\n      }\n\n      // 如果已经是我们构造的错误对象，直接抛出\n      if (error.code && error.message) {\n        throw error;\n      }\n\n      // 其他错误\n      throw {\n        code: 500,\n        message: error.message || '注册失败，请稍后重试',\n        errors: []\n      };\n    }\n  },\n  async login(credentials) {\n    try {\n      logger.apiRequest('POST', `${API_URL}/login`, {\n        phone: credentials.phone\n      });\n      logger.info('AUTH', '开始用户登录', {\n        phone: credentials.phone\n      });\n      const response = await axios.post(`${API_URL}/login`, credentials);\n      logger.apiResponse('POST', `${API_URL}/login`, response.status, {\n        code: response.data.code\n      });\n\n      // 检查响应体中的 code 字段\n      if (response.data.code !== 200) {\n        logger.error('AUTH', '登录失败', {\n          phone: credentials.phone,\n          code: response.data.code,\n          message: response.data.message\n        });\n        throw new Error(response.data.message || '登录失败');\n      }\n\n      // 从data字段中获取实际数据\n      const authData = response.data.data;\n      if (authData) {\n        // 从响应中提取用户信息，排除密码\n        const {\n          password,\n          ...userInfo\n        } = authData;\n        // 保存用户信息到本地存储\n        localStorage.setItem('user', JSON.stringify(userInfo));\n        logger.info('AUTH', '用户登录成功，已保存用户信息', {\n          phone: credentials.phone,\n          userType: userInfo.userType\n        });\n      }\n      return authData;\n    } catch (error) {\n      logger.apiError('POST', `${API_URL}/login`, error);\n      logger.error('AUTH', '用户登录失败', {\n        phone: credentials.phone,\n        errorMessage: error.response?.data?.message || error.message\n      }, error);\n      throw error.response?.data?.message || error.message || error;\n    }\n  },\n  logout() {\n    logger.info('AUTH', '用户登出');\n    const user = localStorage.getItem('user');\n    if (user) {\n      try {\n        const userData = JSON.parse(user);\n        logger.info('AUTH', '清除用户信息', {\n          phone: userData.phone\n        });\n      } catch (e) {\n        logger.warn('AUTH', '解析用户信息失败');\n      }\n    }\n    localStorage.removeItem('user');\n    logger.info('AUTH', '用户登出成功');\n  }\n};","map":{"version":3,"names":["axios","logger","API_URL","authService","register","userData","apiRequest","phone","user_type","nickname","info","userType","response","post","apiResponse","status","code","data","success","error","message","errorObj","errors","apiError","errorMessage","login","credentials","Error","authData","password","userInfo","localStorage","setItem","JSON","stringify","logout","user","getItem","parse","e","warn","removeItem"],"sources":["D:/STUDY/FarmerHappy/farmer_happy/src/api/auth.js"],"sourcesContent":["import axios from 'axios';\nimport logger from '../utils/logger';\n\nconst API_URL = '/api/v1/auth';\n\nexport const authService = {\n    async register(userData) {\n        try {\n            logger.apiRequest('POST', `${API_URL}/register`, {\n                phone: userData.phone,\n                user_type: userData.user_type,\n                nickname: userData.nickname\n            });\n            logger.info('AUTH', '开始注册用户', { userType: userData.user_type });\n            \n            const response = await axios.post(`${API_URL}/register`, userData);\n            \n            logger.apiResponse('POST', `${API_URL}/register`, response.status, {\n                code: response.data.code,\n                success: response.data.code === 200\n            });\n            \n            // 检查响应体中的 code 字段\n            if (response.data.code !== 200) {\n                logger.error('AUTH', '注册失败', {\n                    phone: userData.phone,\n                    code: response.data.code,\n                    message: response.data.message\n                });\n                \n                // 根据不同的错误码抛出详细的错误信息\n                const errorObj = {\n                    code: response.data.code,\n                    message: response.data.message,\n                    errors: response.data.errors || []\n                };\n                \n                throw errorObj;\n            }\n            \n            logger.info('AUTH', '用户注册成功', { \n                phone: userData.phone,\n                userType: userData.user_type \n            });\n            \n            return response.data;\n        } catch (error) {\n            logger.apiError('POST', `${API_URL}/register`, error);\n            logger.error('AUTH', '用户注册失败', {\n                phone: userData.phone,\n                errorMessage: error.response?.data?.message || error.message\n            }, error);\n            \n            // 如果是 axios 错误，提取详细的错误信息\n            if (error.response?.data) {\n                throw {\n                    code: error.response.data.code,\n                    message: error.response.data.message,\n                    errors: error.response.data.errors || []\n                };\n            }\n            \n            // 如果已经是我们构造的错误对象，直接抛出\n            if (error.code && error.message) {\n                throw error;\n            }\n            \n            // 其他错误\n            throw {\n                code: 500,\n                message: error.message || '注册失败，请稍后重试',\n                errors: []\n            };\n        }\n    },\n\n    async login(credentials) {\n        try {\n            logger.apiRequest('POST', `${API_URL}/login`, {\n                phone: credentials.phone\n            });\n            logger.info('AUTH', '开始用户登录', { phone: credentials.phone });\n            \n            const response = await axios.post(`${API_URL}/login`, credentials);\n            \n            logger.apiResponse('POST', `${API_URL}/login`, response.status, {\n                code: response.data.code\n            });\n            \n            // 检查响应体中的 code 字段\n            if (response.data.code !== 200) {\n                logger.error('AUTH', '登录失败', {\n                    phone: credentials.phone,\n                    code: response.data.code,\n                    message: response.data.message\n                });\n                throw new Error(response.data.message || '登录失败');\n            }\n            \n            // 从data字段中获取实际数据\n            const authData = response.data.data;\n            \n            if (authData) {\n                // 从响应中提取用户信息，排除密码\n                const { password, ...userInfo } = authData;\n                // 保存用户信息到本地存储\n                localStorage.setItem('user', JSON.stringify(userInfo));\n                logger.info('AUTH', '用户登录成功，已保存用户信息', {\n                    phone: credentials.phone,\n                    userType: userInfo.userType\n                });\n            }\n            \n            return authData;\n        } catch (error) {\n            logger.apiError('POST', `${API_URL}/login`, error);\n            logger.error('AUTH', '用户登录失败', {\n                phone: credentials.phone,\n                errorMessage: error.response?.data?.message || error.message\n            }, error);\n            throw error.response?.data?.message || error.message || error;\n        }\n    },\n\n    logout() {\n        logger.info('AUTH', '用户登出');\n        const user = localStorage.getItem('user');\n        if (user) {\n            try {\n                const userData = JSON.parse(user);\n                logger.info('AUTH', '清除用户信息', { phone: userData.phone });\n            } catch (e) {\n                logger.warn('AUTH', '解析用户信息失败');\n            }\n        }\n        localStorage.removeItem('user');\n        logger.info('AUTH', '用户登出成功');\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}